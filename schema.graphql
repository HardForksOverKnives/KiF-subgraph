type Liquid @entity {
  id: ID!
  hodlrs: [LiquidHodlr!]! @derivedFrom(field: "liquid")
  transactions: [LiquidTransaction!]! @derivedFrom(field: "liquid")
  transfers: [LiquidTransfer!]! @derivedFrom(field: "liquid")
  totalSupply: BigInt!
  burnedSupply: BigInt!
  circulatingSupply: BigInt!
  price: BigDecimal!
  floorPrice: BigDecimal!
  etherLocked: BigInt!
  lastHodlrPtsUpdateBlockNumber: BigInt!
}

type LiquidTransaction @entity {
  id: ID! # transaction hash
  liquidAmt: BigInt!
  ethAmt: BigInt!
  address: ID! # buyer/seller's wallet address
  blockNumber: BigInt!
  timestamp: BigInt!
  liquid: Liquid!
}

type LiquidHodlr @entity {
  id: ID!
  balance: BigInt!
  totalBought: BigInt!
  totalSold: BigInt!
  totalTransfered: BigInt! # todo
  hodlPoints: BigDecimal! # .0000001 pts per liq held every block (updated every transaction involving hodlr)
  lastBlockUpdate: BigInt!
  liquid: Liquid!
}

# A subset of LiquidHodlrs
# TopLiquidHodlrs get their hodlPoints updated every x blocks
type TopLiquidHodlr @entity {
  id: ID!
  liquidHodlr: LiquidHodlr!
  initiationBlockNumber: BigInt!
  liquid: Liquid!
}

type LiquidTransfer @entity {
  id: ID!
  from: LiquidHodlr!
  to: LiquidHodlr!
  amount: BigInt!
  liquid: Liquid!
}


